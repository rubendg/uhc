%%[doesWhat doclatex
Final, frozen info is defined here:
\begin{itemize}
\item Final type variable mapping + its application to Gam's and Ty's
\item Final kind variable mapping
\end{itemize}
This info is used for TyCore generation and pretty printing.
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Final ValGam
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(2 hmtyinfer).finValGam
ATTR
  AllDecl
%%[[8
  AllExpr AllPatExpr AllCase
%%]]
    [ finValGam: ValGam | | ]

SEM Expr
%%[[2
  | Let         loc         .   finValGamDecls      =   gamTop @decls.patValGam
%%][3
  | Let         loc         .   finValGamDecls      :=  @quValGam_
%%][4
  | Let         loc         .   finValGamDecls      :=  @quValGam_ex_
%%][8
  | Let         loc         .   finValGamDecls      :=  @quValGam_ex_subst
%%]]

SEM Expr
  | Let
%%[[2
                decls       .   finValGam           =   @finValGamDecls
%%][92
                loc         .   finValGam           =   (if @lhs.isFirstLet then gamUnion @gathValGam else id) @lhs.finValGam
%%]]
%%]

%%[(8 hmtyinfer)
SEM AGItf
  | AGItf       loc          
%%[[8
                            .   finValGam           =   emptyGam
%%][50
                            .   finValGam           =   @expr.gathValGam `gamUnion` @lhs.valGam
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Final TyVarMp
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(2 hmtyinfer).finValGam
ATTR AllNT [ finTyVarMp: VarMp | | ]

SEM AGItf
  | AGItf       loc         .   finTyVarMp          =   
%%[[9
                                                        @chrSolveSimpTyVarMp `varUpd`
%%]]
                                                        @expr.tyVarMp
%%]

%%[(9 hmtyinfer)
SEM Expr
  | Let         loc         .   finTyVarMp          =   -- varUpd @tmpoTyVarMp $
                                                        @lhs.finTyVarMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Final type/pred
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(2 hmtyinfer)
SEM Decl
  | TySig       loc         .   finalTy             =   maybe (appDbg "EH.FinalInfo.Decl.TySig.finalTy")    vgiTy $ valGamLookup @nm            @lhs.finValGam
  | Val         loc         .   finalTy             =   maybe (appDbg "EH.FinalInfo.Decl.Val.finalTy")      vgiTy $ valGamLookup @patExpr.topNm @lhs.finValGam
%%[[9
  | Instance    loc         .   finalTy             =   maybe (appDbg "EH.FinalInfo.Decl.Instance.finalTy") vgiTy $ valGamLookup @dictNm        @lhs.finValGam
%%]]
%%]

%%[(93 hmtyinfer)
SEM Decl
  | FusionConv  loc         .   finConTy            =   maybe (appDbg $ "EH.FinalInfo.Decl.FusionConv.finConTy: " ++ show @conNm) vgiTy $ valGamLookup @conNm @lhs.finValGam
                            .   finAbsTy            =   maybe (appDbg $ "EH.FinalInfo.Decl.FusionConv.finAbsTy: " ++ show @absNm) vgiTy $ valGamLookup @absNm @lhs.finValGam
%%]

%%[(8 hmtyinfer)
SEM PatExpr
  | Var VarAs AppTop Rec DataFields Con IConst CConst SConst Irrefutable Bang
%%[[97
    -- Expr
%%]]
                loc         .   finalTy             =   @lhs.finTyVarMp `varUpd` @ty
%%]
                loc         .   finalTy             =   maybe (appDbg $ "EH.FinalInfo.PatExpr.*.finalTy: " ++ show (rpatNmNm @cpNm)) vgiTy $ valGamLookup (rpatNmNm @cpNm) @lhs.finValGam

%%[(5 hmtyinfer)
SEM DataConstr
  | Constr      loc         .   finDataConTy        =   @lhs.finTyVarMp `varUpd` @dataConTyAsVar

SEM PatExpr
  | AppTop Con
%%[[7
    Rec
%%]]
                loc         .   finKnPatTy          =   @lhs.finTyVarMp `varUpd` @knPatTy
%%]

%%[(8 hmtyinfer)
SEM Expr
  | AppTop Var Con
                loc         .   finalTy             =   @lhs.finTyVarMp `varUpd` @ty
  | Case        loc         .   finalTyExpr         =   @lhs.finTyVarMp `varUpd` @expr.ty
  | Lam
%%[[12
    LamImpl
%%]]
                loc         .   finalTyArg          =   @lhs.finTyVarMp `varUpd` @arg.ty
%%]

%%[(8 hmtyinfer)
SEM DataFieldExpr
  | Upd         loc         .   finalTyExpr         =   @lhs.finTyVarMp `varUpd` @expr.ty
%%]

%%[(9 hmtyinfer)
SEM Expr
  | AppTop Rec Lam Let
                loc         .   finKnImplsL         =   map (mkTyPr . snd) @poiPrL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Final type/pred, but also expanded w.r.t. type synonyms, except for IO
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 hmtyinfer)
SEM Expr
%%[[8
  | AppTop Var Con
                loc         .   finalTyExpanded     =   @finalTy
  | Case        loc         .   finalTyExprExpanded =   @finalTyExpr
  | Lam         loc         .   finalTyArgExpanded  =   @finalTyArg
%%][11
  | AppTop Var Con
                loc         .   finalTyExpanded     =   tyCanonicFFI (emptyTyBetaRedEnv' @fe) @finalTy
  | Case        loc         .   finalTyExprExpanded =   tyCanonicFFI (emptyTyBetaRedEnv' @fe) @finalTyExpr
  | Lam
%%[[12
    LamImpl
%%]]
                loc         .   finalTyArgExpanded  =   tyCanonicFFI (emptyTyBetaRedEnv' @fe) @finalTyArg
%%]]
%%]

%%[(8 hmtyinfer)
SEM DataFieldExpr
%%[[8
  | Upd         loc         .   finalTyExprExpanded =   @finalTyExpr
%%][11
  | Upd         loc         .   finalTyExprExpanded =   tyCanonicFFI (emptyTyBetaRedEnv' @fe) @finalTyExpr
%%]]
%%]

%%[(8 hmtyinfer)
SEM PatExpr
  | Var VarAs AppTop Rec DataFields Con IConst CConst SConst Irrefutable Bang
%%[[97
    -- Expr
%%]]
%%[[8
                loc         .   finalTyExpanded     =   @finalTy
%%][11
                loc         .   finalTyExpanded     =   tyCanonicFFI (emptyTyBetaRedEnv' @fe) @finalTy
%%]]
%%]

%%[(8 hmtyinfer)
SEM Decl
%%[[8
  | Val         loc         .   finalTyExpanded     =   @finalTy
%%][11
  | Val         loc         .   finalTyExpanded     =   tyCanonicFFI (emptyTyBetaRedEnv' @fe) @finalTy
%%]]
  | FFI
%%[[90
    FFE
%%]]
%%[[8
                loc         .   finalTyExpanded     =   @ty_sig_
%%][11
                loc         .   finalTyExpanded     =   tyCanonicFFI' True (emptyTyBetaRedEnv' @fe) @ty_sig_
%%]]
%%]

%%[(9 hmtyinfer)
SEM Expr
  | AppTop Rec Lam Let
                loc         .   finKnImplsLExpanded =   map (tyCanonicFFI (emptyTyBetaRedEnv' @fe)) @finKnImplsL
%%]

%%[(50 hmtyinfer)
SEM Decl
  | Instance    loc         .   finalHdInstArgLExpanded
                                                    =   map (tyCanonic (emptyTyBetaRedEnv' @fe)) @instArgTyL
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Final kind
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(6 hmtyinfer).finTyGam
ATTR AllNT [ finKiVarMp: VarMp | | ]

SEM AGItf
  | AGItf       expr        .   finKiVarMp          =   @expr.kiVarMp
%%]

%%[(6 hmtyinfer)
ATTR AllNT [ finTyKiGam: TyKiGam |  | ]

SEM AGItf
  | AGItf       expr        .   finTyKiGam          =   emptyGam

SEM Expr
  | Let         loc         .   finTyKiGam          =   @lhs.finKiVarMp `varUpd` @tyKiGam_l_ `gamUnion` @lhs.finTyKiGam

%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Final ty for Core elaboration: redo all fitting, but now against complete(d) types
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 hmtyinfer codegen coresysf)
SEM Expr
  | Var Con     loc         .   fo_fin      =   @doFit (fioMkFinal @lhs.fiOpts) @lhs.finTyVarMp
  | Lam         loc         .   fo_fin      =   @doFit (fioMkFinal @knFunFIOpts) @lhs.finTyVarMp
%%[[9
  | AppTop      loc         .   fo_fin      =   @doFit (fioMkFinal @lhs.fiOpts) @lhs.finTyVarMp
%%]]
%%[[12
  | LamImpl     loc         .   fo_fin      =   @doFit (implFIOpts {fioBindRFirst=True, fioExpandEqTyVar=True}) @lhs.finTyVarMp
%%]]
%%]

%%[(8 hmtyinfer codegen coresysf)
SEM Decl
  | Val         loc         .   doFit       =   \o m t2 -> fitsIn o @fe @lUniq_fo m @expr.ty t2
                            .   fo_fin      =   @doFit (fioMkFinal @exprFiOpts) @lhs.finTyVarMp @finalTy
                loc         .   lUniq_fo    :   UNIQUEREF gUniq

SEM DataConstr
  | Constr      loc         .   doFit       =   \o m -> fitsIn o @fe @lUniq_fo m @dataConTy @dataConTyAsVar
                            .   fo_fin      =   @doFit (strongFIOpts {fioExpandEqTyVar=True}) @lhs.finTyVarMp
                loc         .   lUniq_fo    :   UNIQUEREF gUniq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%  Final ty for Core elaboration: splitting into args/res for App
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Instantiation info [InstTo] drives the splitting up into type and value args.
For now this is extracted from value bindings only, but must be done for other constructs as well.

%%[(8 hmtyinfer codegen coresysf)
ATTR Expr [ | | finAppInstToL: {[InstTo]} ]
%%]

%%[(8 hmtyinfer codegen coresysf)
SEM Expr
  | Var Con     
%%[[9
    AppTop
%%]]
                loc         .   (finAppInstToLHere,finAppInstToL)
                                            =   instToSplitQu (foLInstToL @fo_fin)
  | App AppImpred
%%[[12
    AppImpl
%%]]
                loc         .   (finAppInstToLHere,finAppInstToL)
                                            =   instToSplitQu $ drop 1 @func.finAppInstToL
  | * - Var Con App AppImpred Parens
%%[[9
    AppTop
%%]]
%%[[12
    AppImpl
%%]]
                loc         .   finAppInstToLHere
                                            =   []
                            .   finAppInstToL
                                            =   []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Final ty for Core elaboration: splitting into args/res for Lam
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Instantiation info [InstTo] drives the splitting up into type and value args,
see remarks for finAppInstToL.

%%[(8 hmtyinfer codegen coresysf)
ATTR Expr [ finLamInstToL: {[InstTo]} | | ]
%%]

%%[(8 hmtyinfer codegen coresysf)
SEM Decl
  | Val         loc         .   finLamInstToL
                                            =   foRInstToL @fo_fin
%%]

%%[(8 hmtyinfer codegen coresysf)
SEM Expr
  | Lam         
%%[[12
    LamImpl
%%]]
                loc         .   useCtxtLamInstL
                                            =   @lhs.exprCtxt /= ExprCtxt_Lam
  | AppTop      loc         .   useCtxtLamInstL
                                            =   @lhs.exprCtxt == ExprCtxt_Top
  | Lam
%%[[12
    LamImpl
%%]]
%%[[9
    AppTop
%%]]
                loc         .   (finLamInstToLHere,finLamInstToL)
                                            =   let finLamInstToL = if @useCtxtLamInstL then @lhs.finLamInstToL else foRInstToL @fo_fin 
                                                in  instToSplitQu finLamInstToL
  | Lam         
%%[[12
    LamImpl
%%]]
                body        .   finLamInstToL
                                            =   drop 1 @finLamInstToL
                            
  | * - Lam Parens
%%[[12
    LamImpl
%%]]
%%[[9
    AppTop
%%]]
                loc         .   (finLamInstToLHere,finLamInstToL)
                                            =   instToSplitQu @lhs.finLamInstToL
%%]

Defaults

%%[(8 hmtyinfer codegen coresysf)
SEM AGItf
  | AGItf       expr        .   finLamInstToL   =   []

SEM CaseAlt
  | Pat         expr        .   finLamInstToL   =   []

SEM DataFieldExpr RecExpr
  | Expr Upd    expr        .   finLamInstToL   =   []

SEM RecExpr
  | Ext         expr        .   finLamInstToL   =   []

%%[[9
SEM Decl
  | InstanceIntro
%%[[90
    FFE
%%]]
                expr        .   finLamInstToL   =   []
%%]]

%%[[97
SEM PatExpr
  | Expr        expr        .   finLamInstToL   =   []
%%]]
%%]

