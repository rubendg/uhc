%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Substituting holes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs module {%{EH}Core.Subst} import(Data.Maybe,qualified Data.Set as Set,qualified Data.Map as Map,EH.Util.Pretty,EH.Util.Utils,{%{EH}Opts.Base},{%{EH}Base.Common},{%{EH}Ty},{%{EH}Core},{%{EH}VarMp},{%{EH}Core.Pretty},{%{EH}Core.FvS})
%%]

%%[(8 codegen) hs import({%{EH}AbstractCore})
%%]

%%[(9 codegen) hs import({%{EH}Core.Coercion})
%%]

%%[(8 codegen).WRAPPER ag import({Core/AbsSyn})
WRAPPER CExpr CBind CBound
%%]

%%[(9 codegen)
--PRAGMA novisit
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Code substitution
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs export(CSubst)
type CSubstInfo = CSubstInfo' CExpr CMetaVal CBind CBound CTy
type CSubst     = CSubst'     CExpr CMetaVal CBind CBound CTy
%%]

On CExpr

%%[(8 codegen) hs export(cSubstAppExpr,cSubstAppBind,cSubstAppBound)
cSubstAppExpr :: Bool -> CSubst -> CExpr -> Maybe CExpr -> CExpr
cSubstAppExpr doDeepSubst cs ce mbOnCe
  = cRepl_Syn_CExpr t
  where t = wrap_CExpr
              (sem_CExpr ce)
              (Inh_CExpr { cSubst_Inh_CExpr = cs
%%[[9
                         , coeArg_Inh_CExpr = maybe CExpr_CoeArg id mbOnCe
%%]]
                         , doDeepSubst_Inh_CExpr = doDeepSubst
                         })

cSubstAppBind :: Bool -> CSubst -> CBind -> CBind
cSubstAppBind doDeepSubst cs ce
  = cRepl_Syn_CBind t
  where t = wrap_CBind
              (sem_CBind ce)
              (Inh_CBind { cSubst_Inh_CBind = cs
%%[[9
                         , coeArg_Inh_CBind = maybe CExpr_CoeArg id Nothing
%%]]
                         , doDeepSubst_Inh_CBind = doDeepSubst
                         })

cSubstAppBound :: {- Bool -> -} CSubst -> CBound -> CBound
cSubstAppBound {- doDeepSubst -} cs ce
  = cRepl_Syn_CBound t
  where t = wrap_CBound
              (sem_CBound ce)
              (Inh_CBound { cSubst_Inh_CBound = cs
%%[[9
                         , coeArg_Inh_CBound = maybe CExpr_CoeArg id Nothing
%%]]
                         , doDeepSubst_Inh_CBound = False -- doDeepSubst
                         })
%%]
  
%%[(8 codegen) hs export(cSubstAppExprAndBinds)
cSubstAppExprAndBinds :: CSubst -> CBind -> CBind
cSubstAppExprAndBinds cs ct = cSubstAppBind {- (defaultCSubstOpts {csoptsDoSubstBind = True}) -} False cs ct
%%]

%%[(9 codegen) hs export(cAppCoeArg)
cAppCoeArg :: CExpr -> CExpr -> CExpr
cAppCoeArg ce coeArg
  = cSubstAppExpr False emptyCSubst ce (Just coeArg)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Code substitution as class
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8888 codegen) hs export(CSubstitutable(..))
infixr `cSubstApp`

class CSubstitutable a where
  cSubstApp :: CSubst -> a -> a

instance CSubstitutable CSubst where
  cSubstApp cs s = cs `cSubstAppSubst` s
%%]

%%[(8 codegen) hs
instance CSubstitutable CExpr CMetaVal CBind CBound CTy CExpr where
  cSubstApp cs ce | Map.null cs
    =  ce
  cSubstApp cs ce
    = cSubstAppExpr False cs ce Nothing
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Dummy value to stop higher order AG subst
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen) hs
cStopSubst = CExpr_String "Core.Subst.cStopSubst: may not happen"
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Deepness/shallowness of subst
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen)
ATTR AllCodeNT CodeAGItf [ doDeepSubst: Bool | | ]
%%]

%%[(9 codegen)
SEM CExpr
  | HoleLet ImplsApp ImplsLam
                loc         .   doDeepSubstHere
                                            =   False
  | Hole
                loc         .   doDeepSubstHere
                                            =   @lhs.doDeepSubst
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Replacement
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Expansion/substitution only 1 time if not doDeepSubst,
except for ImplsApp & ImplsLam which must be expanded fully (required for weaving these).
????? is this so?

%%[(8 codegen)
ATTR AllCodeNT CodeAGItf [ cSubst: CSubst | | ]
%%]

%%[(9 codegen)
ATTR AllCodeNT CodeAGItf [ coeArg: CExpr | | ]
%%]

%%[(8 codegen)
SEM CExpr
  | CaseAltFail loc         .   (canSubst,uid)
                                            =   cafailHasId @failReason
%%]

%%[(9 codegen)
SEM CExpr
  | HoleLet     loc         .   uid         =   @bindsUid
%%]

%%[(8 codegen)
SEM CExpr
  | CaseAltFail
%%[[9
    Hole ImplsApp ImplsLam
%%]]
                loc         .   csKey       =   CSKey_UID @uid
%%[[9
  | HoleLet     loc         .   csKey       =   CSKey_UID @bindsUid
%%]]
  | Var         loc         .   csKey       =   CSKey_Ref @ref
%%]

%%[(8 codegen)
SEM CExpr
  | CaseAltFail (loc.replv,loc.isRepl)      =   if @canSubst
                                                then case Map.lookup @csKey @lhs.cSubst of
                                                       Just (CSIExpr ce)  -> (ce,True)
                                                       _                  -> (@cRepl,False)
                                                else (@cRepl,False)
  | Var         (loc.replv,loc.isRepl)      =   case Map.lookup @csKey @lhs.cSubst of
                                                  Just (CSIExpr e)   -> (e,True)
                                                  _                  -> (@cRepl,False)
%%]

%%[(9 codegen)
SEM CExpr
  | Hole        (loc.replv,loc.isRepl)      =   case Map.lookup @csKey @lhs.cSubst of
                                                  Just (CSIExpr ce)  -> (ce,True)
                                                  _                  -> (@cRepl,False)
%%]

%%[(9 codegen)
SEM CExpr
  | HoleLet     (loc.replv,loc.isRepl)      =   case Map.lookup @csKey @lhs.cSubst of
                                                  Just (CSIBinds b)  -> (@lhs.cSubst `cSubstApp` acoreLetRec b @body.cRepl,True)
                                                  _                  -> (@cRepl,False)
  | CoeArg      (loc.replv,loc.isRepl)      =   (@lhs.coeArg,True)
  | ImplsApp ImplsLam
                (loc.coeAppL,loc.coeLamL,loc.isRepl)
                                            =   case Map.lookup @csKey @lhs.cSubst of
                                                  Just (CSIImpls ca cl)  -> (ca,cl,True)
                                                  _                      -> ([],[],False)
  | ImplsApp    loc         .   replv       =   coeWeaveOn2 emptyCSubst @coeAppL [] @func.cRepl
  | ImplsLam    loc         .   replv       =   coeWeaveOn2 emptyCSubst [] @coeLamL @body.cRepl
%%]

%%[(8 codegen)
SEM CExpr
  | CaseAltFail Var
%%[[9
    Hole HoleLet CoeArg ImplsApp ImplsLam
%%]]
                inst        .   repl'       :   CExpr
                inst        .   repl'       =   if @lhs.doDeepSubst && @isRepl then @replv else cStopSubst
%%]

%%[(8 codegen)
SEM CExpr
  | CaseAltFail Var
%%[[9
    Hole HoleLet ImplsApp ImplsLam
%%]]
                repl'       .   cSubst      =   Map.delete @csKey @lhs.cSubst
%%]

%%[(8 codegen)
ATTR AllCodeNT CodeAGItf [ | | cRepl: SELF ]
%%]

%%[(8 codegen)
SEM CExpr
  | CaseAltFail Var
%%[[9
    Hole HoleLet ImplsApp ImplsLam
%%]]
                lhs         .   cRepl       =   if @lhs.doDeepSubst && @isRepl then @repl'.cRepl else @replv
%%]

%%[(9 codegen)
SEM CExpr
  | CoeArg      lhs         .   cRepl       =   @replv -- if @isRepl then @repl'.cRepl else @cRepl
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Coercion: from Coe -> CExpr, with or without postponed substitution
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 codegen) hs export(coeEvalOnAsSubst)
coeEvalOnAsSubst :: UID -> Coe -> CExpr -> (CExpr,CSubst)
coeEvalOnAsSubst uniq coe ce
  = (c,s)
  where (_,c,s) = ev uniq coe ce
        ev uniq coe ce
          = case coe of
              c | acoreCoeIsId c-> mk ce
              Coe_Map  f        -> mk $ f ce
              Coe_App1 a        -> mk $ acore1App ce a
              Coe_Lam n   t     -> mk $ acoreLam1Ty n t ce
              Coe_LamLet n t i  -> mk $ acoreLam1Ty n t $ acoreHoleLet i ce
              Coe_LetRec b      -> mk $ acoreLetRec b ce
              Coe_Compose c1 c2 -> (u2, c1', s2 `cSubstAppSubst` s1)
                                where (u1,c2',s1) = ev uniq c2 ce
                                      (u2,c1',s2) = ev u1   c1 c2'
              Coe_C e           -> (u', e `cAppCoeArg` acoreUidHole u, acoreCSubstFromUidExprL [(u,ce)])
                                where (u',u) = mkNewUID uniq
              Coe_ImplApp iv    -> mk $ CExpr_ImplsApp ce iv
              Coe_ImplLam iv    -> mk $ CExpr_ImplsLam iv ce
          where mk c = (uniq,c,emptyCSubst)
%%]

%%[(9 codegen) hs
coeEvalOn :: Coe -> CExpr -> CExpr
coeEvalOn coe ce
  = s `cSubstApp` ce'
  where (ce',s) = coeEvalOnAsSubst uidStart coe ce
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Coercion: canceling (wiping) & combining (weaving)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 codegen) hs
coeWeaveOnAsSubst :: UID -> [Coe] -> [Coe] -> CExpr -> (CExpr,CSubst)
coeWeaveOnAsSubst = coeWeaveWithSubstOnAsSubst emptyCSubst

coeWeaveWithSubstOnAsSubst :: CSubst -> UID -> [Coe] -> [Coe] -> CExpr -> (CExpr,CSubst)
coeWeaveWithSubstOnAsSubst cs uniq lCoeL rCoeL ce
  = snd $ foldr ev (foldr ev (uniq,(ce,emptyCSubst)) (reverse lCoeL)) rCoeL
  where ev c (uniq,(e,s)) = (u',(cs `cSubstApp` e',s' `cSubstAppSubst` s))
          where (u',u ) = mkNewUID uniq
                (e',s') = coeEvalOnAsSubst u c e
%%]

%%[(9 codegen && hmTyRuler) hs
coeWeaveOn :: CSubst -> [Coe] -> [Coe] -> CExpr -> CExpr
coeWeaveOn cs lCoeL rCoeL ce
  =  let  ev c e = cs `cSubstApp` (c `coeEvalOn` e)
     in   foldr ev (foldr ev ce (reverse lCoeL)) rCoeL
%%]

%%[(9 codegen) hs
coeWeaveOn2 :: CSubst -> [Coe] -> [Coe] -> CExpr -> CExpr
coeWeaveOn2 cs lCoeL rCoeL ce
  = cSubstAppExpr True s e Nothing
  where (e,s) = coeWeaveWithSubstOnAsSubst cs uidStart lCoeL rCoeL ce
%%]

%%[(9 codegen) hs
coeWipe :: [Coe] -> [Coe] -> ([Coe],[Coe])
coeWipe l r
  = (reverse l', reverse r')
  where w l r =  case lr of
                   (Coe_ImplApp li:ls,Coe_ImplLam ri:rs)
                                  | li == ri   -> w ls rs
                                  | otherwise  -> lr
                   _                           -> lr
              where lr = (l,r)
        (l',r') = w (reverse l) (reverse r)
%%]

%%[(9 codegen) hs export(coeWipeWeaveAsSubst2)
coeWipeWeaveAsSubst :: EHCOpts -> UID -> VarMp -> [Coe] -> [Coe] -> (Coe,CSubst)
coeWipeWeaveAsSubst opts uniq c lCoeL rCoeL
  = (Coe_C e,s)
  where (lCoeL',rCoeL') = coeWipe (concatMap (coeImplsAppLVarMp opts c) lCoeL) (concatMap (coeImplsAppRVarMp c) rCoeL)
        (e,s) = coeWeaveOnAsSubst uniq lCoeL' rCoeL' CExpr_CoeArg

coeWipeWeaveAsSubst2 :: EHCOpts -> UID -> VarMp -> CSubst -> [Coe] -> [Coe] -> (Coe,CSubst)
coeWipeWeaveAsSubst2 opts uniq c cs lCoeL rCoeL
  = (Coe_C e,s)
  where (lCoeL',rCoeL') = coeWipe (concatMap (coeImplsAppLVarMp opts c) lCoeL) (concatMap (coeImplsAppRVarMp c) rCoeL)
        (e,s) = coeWeaveWithSubstOnAsSubst cs uniq lCoeL' rCoeL' CExpr_CoeArg
%%]

%%[(9 codegen && hmTyRuler) hs export(coeWipeWeave)
coeWipeWeave :: EHCOpts -> VarMp -> CSubst -> [Coe] -> [Coe] -> Coe
coeWipeWeave opts c cs lCoeL rCoeL
  =  let  (lCoeL',rCoeL')
            = coeWipe (concatMap (coeImplsAppLVarMp opts c) lCoeL) (concatMap (coeImplsAppRVarMp c) rCoeL)
     in   Coe_C (coeWeaveOn2 cs lCoeL' rCoeL' CExpr_CoeArg)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Coercion
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 codegen) hs export(mkLamBodyCoe)
coeImplsAppLVarMp :: EHCOpts -> VarMp -> Coe -> [Coe]
coeImplsAppLVarMp opts c coe
  =  case coe of
       Coe_ImplApp i  -> maybe [coe] (acoreCoeImplsApp) (varmpImplsLookupCyc i c)
       _              -> [coe]

coeImplsAppRVarMp :: VarMp -> Coe -> [Coe]
coeImplsAppRVarMp c coe
  =  case coe of
       Coe_ImplLam i  -> maybe [coe] (acoreCoeImplsLam acoreCoeId) (varmpImplsLookupCyc i c)
       _              -> [coe]

mkLamBodyCoe :: Coe -> [Coe] -> [Coe]
mkLamBodyCoe onLast l
  =  case l of
       (_:_)              -> h ++ [onLast `acoreCoeCompose` t]
                          where h = init l
                                t = last l
       _ | acoreCoeIsId onLast -> []
         | otherwise           -> [onLast]
%%]

%%[(9 codegen) hs
instance PP Coe where
  pp c = "<" >|< pp (fst $ coeEvalOnAsSubst uidStart c CExpr_CoeArg) >|< ">"
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% LRCoe coercion for lamda
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(9 codegen) hs export(lrcoeWipeWeaveAsSubst,lrcoeForLamTyAppAsSubst)
lrcoeWipeWeaveAsSubst :: EHCOpts -> UID -> VarMp -> LRCoe -> (Coe,CSubst)
lrcoeWipeWeaveAsSubst opts uniq cnstr (LRCoe LRCoeId _ _) = (acoreCoeId,emptyCSubst)
lrcoeWipeWeaveAsSubst opts uniq cnstr lrcoe               = coeWipeWeaveAsSubst opts uniq cnstr (lrcoeLeftL lrcoe) (lrcoeRightL lrcoe)

lrcoeForLamTyAppAsSubst :: EHCOpts -> UID -> LRCoe -> LRCoe -> (LRCoe,CSubst)
lrcoeForLamTyAppAsSubst opts uniq f a
  = (LRCoe k [l] [r] `lrcoeUnion` a, s)
  where (u',u1,u2,u3) = mkNewLevUID3 uniq
        n = uidHNm u1
        r = acoreCoeLam1 n
        (k,l,s)
          = case f of
              lr@(LRCoe LRCoeOther _ _)
                -> (lrcoeKindOfCoe c, acoreCoeAppN [a], cSubstAppSubst s1 s2)
                where (c,s1) = lrcoeWipeWeaveAsSubst opts u2 emptyVarMp lr
                      (a,s2) = coeEvalOnAsSubst u3 c (acoreVar n)
              LRCoe LRCoeId _ _
                -> (LRCoeId, l, emptyCSubst)
                where l = acoreCoeAppN [acoreVar n]

%%]

%%[(9 codegen && hmTyRuler) hs export(lrcoeWipeWeave,lrcoeForLamTyApp)
lrcoeWipeWeave :: EHCOpts -> VarMp -> CSubst -> LRCoe -> Coe
lrcoeWipeWeave opts cnstr csubst (LRCoe LRCoeId _ _) = acoreCoeId
lrcoeWipeWeave opts cnstr csubst lrcoe               = coeWipeWeave opts cnstr csubst (lrcoeLeftL lrcoe) (lrcoeRightL lrcoe)

lrcoeForLamTyApp :: EHCOpts -> UID -> CSubst -> LRCoe -> LRCoe -> LRCoe
lrcoeForLamTyApp opts uniq csubst f a
  = LRCoe k [l] [r] `lrcoeUnion` a
  where n = uidHNm uniq
        r = acoreCoeLam1 n
        (k,l)
          = case f of
              lr@(LRCoe LRCoeOther _ _)
                -> (lrcoeKindOfCoe c, l)
                where l = acoreCoeAppN [c `coeEvalOn` acoreVar n]
                      c = lrcoeWipeWeave opts emptyVarMp csubst lr
              LRCoe LRCoeId _ _
                -> (LRCoeId, l)
                where l = acoreCoeAppN [acoreVar n]
%%]

